name: Test App

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on: # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master, "release/*"]

jobs:
  pytest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-11]
        python-version: [3.8]
        requires: ["latest"]

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # TODO: use replace_oldest_ver() instead
      - name: Set min. dependencies
        if: matrix.requires == 'oldest'
        run: |
          for fpath in ('requirements.txt'):
              req = open(fpath).read().replace('>=', '==')
              open(fpath, 'w').write(req)
        shell: python

      - run: echo "::set-output name=period::$(python -c 'import time ; days = time.time() / 60 / 60 / 24 ; print(int(days / 7))' 2>&1)"
        if: matrix.requires == 'latest'
        id: times

      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Get pip cache
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.requires }}-td${{ steps.times.outputs.period }}-${{ hashFiles('requirements/app/base.txt') }}
          restore-keys: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.requires }}-td${{ steps.times.outputs.period }}-

      - name: Install dependencies
        run: |
          pip --version
          pip install -r requirements.txt -r requirements/test.txt --quiet --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install -e .
          playwright install
          pip list
        shell: bash

      - name: Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          PYTEST_ARTIFACT: results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
        run: |
          python -m coverage run -m pytest tests --junitxml=$PYTEST_ARTIFACT --durations=0 --color=yes -v

      # DISPLAYED AS THE UI CHANGES
      # - name: Story Tests
      #   run: |
      #     python -m coverage run -m behave "tests/features/"  -v

      #      - name: Upload pytest test results
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: unittest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
      #          path: tests/results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      #        if: failure()
      #
      - name: Statistics
        if: success()
        working-directory: ./
        run: |
          ls -a
          coverage combine -a
          coverage xml -i
          coverage report -i

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: tests/coverage.xml
      #     flags: unittests
      #     env_vars: OS,PYTHON
      #     name: codecov-umbrella
      #     fail_ci_if_error: false
